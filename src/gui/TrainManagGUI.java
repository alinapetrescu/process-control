package dcrs.gui;

import dcrs.railway.Locomotive;
import dcrs.railway.Railway;
import dcrs.railway.Train;
import dcrs.railway.Signal;
import dcrs.railway.Line;
import java.awt.*;
import java.util.ArrayList;

/**
 * @author Alina
 */
public class TrainManagGUI extends javax.swing.JFrame 
{
    public Railway railway;
    
    /**
     * Creates new form TrainManagGUI
     */
    public TrainManagGUI(Railway railway) 
    {
        initComponents();
        this.railway = railway;        
        jpTrainCreate.setVisible(true);
        jpLocoCreate.setVisible(false);
        jpTrainDelete.setVisible(false);
        jpLocoDelete.setVisible(false);
        this.setVisible(true);
        
        //on alimente initialement les deux comboBox jcbChoiceIdLoco et jcbChoiceIdLocoDeleteLoco
        //avec les id des locomotives "libres" (qui ne sont pas utilisées par aucun train)
        for(Locomotive loco : railway.getLocomotives())
        {
            boolean isUsed = false;
            for(Train train : railway.getTrains())
            {
                if(loco == train.getLocomotive())
                {
                    isUsed = true;
                    break;
                }
            }
            if(!isUsed)
            {
                jcbChoiceIdLoco.addItem(loco.getId());
                jcbChoiceIdLocoDeleteLoco.addItem(loco.getId());
            }
        }
        
        //on alimente initialement le comboBox jcbSignalIdTrain avec tous les signaux existants
        jcbSignalIdTrain.addItem("Signal not yet known");
        for(Signal signal : railway.getSignals())
        {
            jcbSignalIdTrain.addItem(signal.getId());
        }
        
        //on alimente initialement le comboBox jcbChoiceIdTrainDelete avec les id des trains
        //qui peuvent être supprimés (ie ceux qui ne bougent pas et n'ont pas de ligne associée)
        for(Train train : railway.getTrains())
        {
            if(train.getLine() == null && train.getLocomotive().getSpeed() == 0)
            {
                jcbChoiceIdTrainDelete.addItem(train.getId());
            }
        }
        //s'il n'y a pas de train à supprimer, voir ci-dessous
        if(jcbChoiceIdTrainDelete.getItemCount() == 0)
        {
            jtfMessageTrainDelete.setText("No more train to delete!");
            jtfMessageTrainDelete.setForeground(Color.RED);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgChoice = new javax.swing.ButtonGroup();
        jtfTitle = new javax.swing.JTextField();
        jpChoice = new javax.swing.JPanel();
        jrbTrainCreate = new javax.swing.JRadioButton();
        jrbLocoCreate = new javax.swing.JRadioButton();
        jlChoice = new javax.swing.JLabel();
        jrbLocoDelete = new javax.swing.JRadioButton();
        jrbTrainDelete = new javax.swing.JRadioButton();
        jlpChoice = new javax.swing.JLayeredPane();
        jpLocoCreate = new javax.swing.JPanel(new CardLayout(30,10));
        jlLoco = new javax.swing.JLabel();
        jtfIdLoco = new javax.swing.JTextField();
        jtfAddressLoco = new javax.swing.JTextField();
        jtfLengthLoco = new javax.swing.JTextField();
        jtfInertiaLoco = new javax.swing.JTextField();
        jlIDLoco = new javax.swing.JLabel();
        jlAddressLoco = new javax.swing.JLabel();
        jlLengthLoco = new javax.swing.JLabel();
        jlInertiaLoco = new javax.swing.JLabel();
        jbGoLoco = new javax.swing.JButton();
        jtfMessageLoco = new javax.swing.JTextField();
        jpTrainCreate = new javax.swing.JPanel();
        jlSignalIdTrain = new javax.swing.JLabel();
        jlIdTrain = new javax.swing.JLabel();
        jlLocoIdTrain = new javax.swing.JLabel();
        jtfMessageTrain = new javax.swing.JTextField();
        jbGoTrain = new javax.swing.JButton();
        jlTrain = new javax.swing.JLabel();
        jtfIdTrain = new javax.swing.JTextField();
        jcbChoiceIdLoco = new javax.swing.JComboBox();
        jcbSignalIdTrain = new javax.swing.JComboBox();
        jpUp = new javax.swing.JPanel();
        jpLocoDelete = new javax.swing.JPanel();
        jlLocoDelete = new javax.swing.JLabel();
        jcbChoiceIdLocoDeleteLoco = new javax.swing.JComboBox();
        jlLocoIdDelete = new javax.swing.JLabel();
        jbDeleteLoco = new javax.swing.JButton();
        jlLengthLocoDelete = new javax.swing.JLabel();
        jlInertiaLocoDelete = new javax.swing.JLabel();
        jlAddressLocoDelete = new javax.swing.JLabel();
        jtfInertiaLocoDelete = new javax.swing.JTextField();
        jtfAddressLocoDelete = new javax.swing.JTextField();
        jtfLengthLocoDelete = new javax.swing.JTextField();
        jtfMessageLocoDelete = new javax.swing.JTextField();
        jpTrainDelete = new javax.swing.JPanel();
        jlTrainDelete = new javax.swing.JLabel();
        jcbChoiceIdTrainDelete = new javax.swing.JComboBox();
        jlTrainIdDelete = new javax.swing.JLabel();
        jbDeleteTrain = new javax.swing.JButton();
        jlLocoIdTrainDelete = new javax.swing.JLabel();
        jlSignalIdTrainDelete = new javax.swing.JLabel();
        jtfMessageTrainDelete = new javax.swing.JTextField();
        jtfIdLocoDeleteTrain = new javax.swing.JTextField();
        jtfIdSignalDeleteTrain = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jtfTitle.setBackground(new java.awt.Color(255, 0, 0));
        jtfTitle.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jtfTitle.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfTitle.setText("TRAIN MANAGEMENT");

        jpChoice.setBackground(new java.awt.Color(44, 244, 246));
        jpChoice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jrbTrainCreate.setBackground(new java.awt.Color(0, 255, 255));
        bgChoice.add(jrbTrainCreate);
        jrbTrainCreate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jrbTrainCreate.setText("Create Train");
        jrbTrainCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTrainCreateActionPerformed(evt);
            }
        });

        jrbLocoCreate.setBackground(new java.awt.Color(51, 255, 255));
        bgChoice.add(jrbLocoCreate);
        jrbLocoCreate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jrbLocoCreate.setText("Create Locomotive");
        jrbLocoCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbLocoCreateActionPerformed(evt);
            }
        });

        jlChoice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlChoice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlChoice.setText("What do you want to create/delete?");

        jrbLocoDelete.setBackground(new java.awt.Color(0, 255, 255));
        bgChoice.add(jrbLocoDelete);
        jrbLocoDelete.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jrbLocoDelete.setText("Delete Locomotive");
        jrbLocoDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbLocoDeleteActionPerformed(evt);
            }
        });

        jrbTrainDelete.setBackground(new java.awt.Color(0, 255, 255));
        bgChoice.add(jrbTrainDelete);
        jrbTrainDelete.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jrbTrainDelete.setText("Delete Train");
        jrbTrainDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTrainDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpChoiceLayout = new javax.swing.GroupLayout(jpChoice);
        jpChoice.setLayout(jpChoiceLayout);
        jpChoiceLayout.setHorizontalGroup(
            jpChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpChoiceLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jpChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbLocoCreate)
                    .addComponent(jrbTrainCreate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(jpChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbTrainDelete)
                    .addComponent(jrbLocoDelete))
                .addGap(24, 24, 24))
        );
        jpChoiceLayout.setVerticalGroup(
            jpChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpChoiceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbLocoCreate)
                    .addComponent(jrbLocoDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbTrainCreate)
                    .addComponent(jrbTrainDelete))
                .addGap(28, 28, 28))
        );

        jlpChoice.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jpLocoCreate.setBackground(new java.awt.Color(255, 204, 204));

        jlLoco.setBackground(new java.awt.Color(255, 51, 51));
        jlLoco.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jlLoco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlLoco.setText("Fill your Loco information");

        jtfIdLoco.setToolTipText("ID must be unique");
        jtfIdLoco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfIdLocoKeyTyped(evt);
            }
        });

        jtfAddressLoco.setToolTipText("Address must be an integer between 0 and 7");
        jtfAddressLoco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfAddressLocoKeyTyped(evt);
            }
        });

        jtfLengthLoco.setToolTipText("Length must be a positive integer");
        jtfLengthLoco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfLengthLocoKeyTyped(evt);
            }
        });

        jtfInertiaLoco.setToolTipText("Inertia must be 0 or 1");
        jtfInertiaLoco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfInertiaLocoKeyTyped(evt);
            }
        });

        jlIDLoco.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlIDLoco.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlIDLoco.setText("ID");

        jlAddressLoco.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlAddressLoco.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlAddressLoco.setText("ADDRESS");

        jlLengthLoco.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlLengthLoco.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlLengthLoco.setText("LENGTH");

        jlInertiaLoco.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlInertiaLoco.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlInertiaLoco.setText("INERTIA");

        jbGoLoco.setText("GO");
        jbGoLoco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGoLocoActionPerformed(evt);
            }
        });

        jtfMessageLoco.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jtfMessageLoco.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfMessageLoco.setText("Click GO when ready!");

        javax.swing.GroupLayout jpLocoCreateLayout = new javax.swing.GroupLayout(jpLocoCreate);
        jpLocoCreate.setLayout(jpLocoCreateLayout);
        jpLocoCreateLayout.setHorizontalGroup(
            jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLocoCreateLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jlAddressLoco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlIDLoco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlLengthLoco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlInertiaLoco, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74)
                .addGroup(jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpLocoCreateLayout.createSequentialGroup()
                        .addComponent(jtfMessageLoco, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(158, Short.MAX_VALUE))
                    .addGroup(jpLocoCreateLayout.createSequentialGroup()
                        .addGroup(jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtfLengthLoco, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                            .addComponent(jtfAddressLoco, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfIdLoco, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfInertiaLoco))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbGoLoco, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))))
            .addComponent(jlLoco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpLocoCreateLayout.setVerticalGroup(
            jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLocoCreateLayout.createSequentialGroup()
                .addComponent(jlLoco, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpLocoCreateLayout.createSequentialGroup()
                        .addGroup(jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlIDLoco)
                            .addComponent(jtfIdLoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlAddressLoco)
                            .addComponent(jtfAddressLoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfLengthLoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlLengthLoco))
                        .addGap(18, 18, 18)
                        .addGroup(jpLocoCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfInertiaLoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlInertiaLoco)))
                    .addComponent(jbGoLoco, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jtfMessageLoco, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jpLocoCreate.setBounds(0, 0, 540, 330);
        jlpChoice.add(jpLocoCreate, javax.swing.JLayeredPane.PALETTE_LAYER);

        jpTrainCreate.setBackground(new java.awt.Color(255, 204, 153));

        jlSignalIdTrain.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlSignalIdTrain.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlSignalIdTrain.setText("SIGNAL ID");

        jlIdTrain.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlIdTrain.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlIdTrain.setText("TRAIN ID");

        jlLocoIdTrain.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlLocoIdTrain.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlLocoIdTrain.setText("LOCO ID");

        jtfMessageTrain.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jtfMessageTrain.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfMessageTrain.setText("Click GO when ready!");

        jbGoTrain.setText("GO");
        jbGoTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGoTrainActionPerformed(evt);
            }
        });

        jlTrain.setBackground(new java.awt.Color(255, 51, 51));
        jlTrain.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jlTrain.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlTrain.setText("Fill your Train information");

        jtfIdTrain.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfIdTrain.setToolTipText("Train ID must be unique");
        jtfIdTrain.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfIdTrainKeyTyped(evt);
            }
        });

        jcbChoiceIdLoco.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbChoiceIdLoco.setToolTipText("Choose an existent free loco");

        jcbSignalIdTrain.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbSignalIdTrain.setToolTipText("Choose a signal");

        javax.swing.GroupLayout jpTrainCreateLayout = new javax.swing.GroupLayout(jpTrainCreate);
        jpTrainCreate.setLayout(jpTrainCreateLayout);
        jpTrainCreateLayout.setHorizontalGroup(
            jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTrainCreateLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jlIdTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlLocoIdTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlSignalIdTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addGroup(jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpTrainCreateLayout.createSequentialGroup()
                        .addComponent(jtfMessageTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(145, Short.MAX_VALUE))
                    .addGroup(jpTrainCreateLayout.createSequentialGroup()
                        .addGroup(jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jcbSignalIdTrain, javax.swing.GroupLayout.Alignment.LEADING, 0, 190, Short.MAX_VALUE)
                            .addComponent(jtfIdTrain, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbChoiceIdLoco, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbGoTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))))
            .addComponent(jlTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpTrainCreateLayout.setVerticalGroup(
            jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTrainCreateLayout.createSequentialGroup()
                .addComponent(jlTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpTrainCreateLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlLocoIdTrain)
                            .addComponent(jcbChoiceIdLoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlIdTrain)
                            .addComponent(jtfIdTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jpTrainCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlSignalIdTrain)
                            .addComponent(jcbSignalIdTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jbGoTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addComponent(jtfMessageTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        jpTrainCreate.setBounds(0, 0, 540, 330);
        jlpChoice.add(jpTrainCreate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jpTrainCreate.getAccessibleContext().setAccessibleParent(this);

        javax.swing.GroupLayout jpUpLayout = new javax.swing.GroupLayout(jpUp);
        jpUp.setLayout(jpUpLayout);
        jpUpLayout.setHorizontalGroup(
            jpUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        jpUpLayout.setVerticalGroup(
            jpUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        jpUp.setBounds(0, 0, 540, 360);
        jlpChoice.add(jpUp, javax.swing.JLayeredPane.DRAG_LAYER);

        jpLocoDelete.setBackground(new java.awt.Color(153, 204, 255));

        jlLocoDelete.setBackground(new java.awt.Color(255, 51, 51));
        jlLocoDelete.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jlLocoDelete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlLocoDelete.setText("Delete a Loco");

        jcbChoiceIdLocoDeleteLoco.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbChoiceIdLocoDeleteLoco.setToolTipText("Remove an existent free loco");
        jcbChoiceIdLocoDeleteLoco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbChoiceIdLocoDeleteLocoActionPerformed(evt);
            }
        });

        jlLocoIdDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlLocoIdDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlLocoIdDelete.setText("LOCO ID");

        jbDeleteLoco.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbDeleteLoco.setForeground(new java.awt.Color(255, 0, 0));
        jbDeleteLoco.setText("DELETE");
        jbDeleteLoco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteLocoActionPerformed(evt);
            }
        });

        jlLengthLocoDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlLengthLocoDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlLengthLocoDelete.setText("LENGTH");

        jlInertiaLocoDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlInertiaLocoDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlInertiaLocoDelete.setText("INERTIA");

        jlAddressLocoDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlAddressLocoDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlAddressLocoDelete.setText("ADDRESS");

        jtfInertiaLocoDelete.setEditable(false);
        jtfInertiaLocoDelete.setToolTipText("Inertia of the selected loco");

        jtfAddressLocoDelete.setEditable(false);
        jtfAddressLocoDelete.setToolTipText("Address of the selected loco");

        jtfLengthLocoDelete.setEditable(false);
        jtfLengthLocoDelete.setToolTipText("Length of the selected loco");

        jtfMessageLocoDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jtfMessageLocoDelete.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfMessageLocoDelete.setText("Click DELETE when ready!");

        javax.swing.GroupLayout jpLocoDeleteLayout = new javax.swing.GroupLayout(jpLocoDelete);
        jpLocoDelete.setLayout(jpLocoDeleteLayout);
        jpLocoDeleteLayout.setHorizontalGroup(
            jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlLocoDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addGroup(jpLocoDeleteLayout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jlAddressLocoDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlLengthLocoDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlInertiaLocoDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpLocoDeleteLayout.createSequentialGroup()
                        .addComponent(jlLocoIdDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpLocoDeleteLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jcbChoiceIdLocoDeleteLoco, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpLocoDeleteLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfInertiaLocoDelete)
                                    .addComponent(jtfMessageLocoDelete)
                                    .addComponent(jtfAddressLocoDelete)
                                    .addComponent(jtfLengthLocoDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(41, 41, 41)
                .addComponent(jbDeleteLoco, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpLocoDeleteLayout.setVerticalGroup(
            jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLocoDeleteLayout.createSequentialGroup()
                .addComponent(jlLocoDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpLocoDeleteLayout.createSequentialGroup()
                        .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlLocoIdDelete)
                            .addComponent(jcbChoiceIdLocoDeleteLoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlAddressLocoDelete)
                            .addComponent(jtfAddressLocoDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlLengthLocoDelete)
                            .addComponent(jtfLengthLocoDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpLocoDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfInertiaLocoDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlInertiaLocoDelete))
                        .addGap(18, 18, 18)
                        .addComponent(jtfMessageLocoDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbDeleteLoco, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 41, Short.MAX_VALUE))
        );

        jpLocoDelete.setBounds(0, 0, 500, 330);
        jlpChoice.add(jpLocoDelete, javax.swing.JLayeredPane.MODAL_LAYER);

        jpTrainDelete.setBackground(new java.awt.Color(153, 255, 153));

        jlTrainDelete.setBackground(new java.awt.Color(255, 51, 51));
        jlTrainDelete.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jlTrainDelete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlTrainDelete.setText("Delete a Train");

        jcbChoiceIdTrainDelete.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbChoiceIdTrainDelete.setToolTipText("Remove an existent free train");
        jcbChoiceIdTrainDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbChoiceIdTrainDeleteActionPerformed(evt);
            }
        });

        jlTrainIdDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlTrainIdDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlTrainIdDelete.setText("TRAIN ID");

        jbDeleteTrain.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbDeleteTrain.setForeground(new java.awt.Color(255, 0, 0));
        jbDeleteTrain.setText("DELETE");
        jbDeleteTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteTrainActionPerformed(evt);
            }
        });

        jlLocoIdTrainDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlLocoIdTrainDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlLocoIdTrainDelete.setText("LOCO ID");

        jlSignalIdTrainDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlSignalIdTrainDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlSignalIdTrainDelete.setText("SIGNAL ID");

        jtfMessageTrainDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jtfMessageTrainDelete.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfMessageTrainDelete.setText("Click DELETE when ready!");

        jtfIdLocoDeleteTrain.setEditable(false);
        jtfIdLocoDeleteTrain.setToolTipText("Loco id of the selected train");

        jtfIdSignalDeleteTrain.setEditable(false);
        jtfIdSignalDeleteTrain.setToolTipText("Signal id of the selected train");

        javax.swing.GroupLayout jpTrainDeleteLayout = new javax.swing.GroupLayout(jpTrainDelete);
        jpTrainDelete.setLayout(jpTrainDeleteLayout);
        jpTrainDeleteLayout.setHorizontalGroup(
            jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlTrainDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addGroup(jpTrainDeleteLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlTrainIdDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlLocoIdTrainDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlSignalIdTrainDelete))
                .addGap(38, 38, 38)
                .addGroup(jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbChoiceIdTrainDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jtfIdLocoDeleteTrain)
                        .addComponent(jtfIdSignalDeleteTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jtfMessageTrainDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbDeleteTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpTrainDeleteLayout.setVerticalGroup(
            jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTrainDeleteLayout.createSequentialGroup()
                .addComponent(jlTrainDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpTrainDeleteLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jbDeleteTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpTrainDeleteLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlTrainIdDelete)
                            .addComponent(jcbChoiceIdTrainDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfIdLocoDeleteTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlLocoIdTrainDelete))
                        .addGap(21, 21, 21)
                        .addGroup(jpTrainDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfIdSignalDeleteTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlSignalIdTrainDelete))))
                .addGap(56, 56, 56)
                .addComponent(jtfMessageTrainDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 50, Short.MAX_VALUE))
        );

        jpTrainDelete.setBounds(0, 0, 540, 330);
        jlpChoice.add(jpTrainDelete, javax.swing.JLayeredPane.POPUP_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtfTitle)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addComponent(jlpChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
            .addGroup(layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jpChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jtfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jpChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlpChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //dans ce gestionnaire d'événements, on met ce qui doit se passer lorsque le
    //radio-bouton jrbTrainCreate est choisi
    private void jrbTrainCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTrainCreateActionPerformed
        //on rend visible seulement le formulaire jpTrainCreate
        jpTrainCreate.setVisible(true);
        jpLocoCreate.setVisible(false);
        jpTrainDelete.setVisible(false);
        jpLocoDelete.setVisible(false);
        jpUp.setVisible(false);
     
        //on réactualise le comboBox jcbChoiceIdLoco avec les id des locomotives "libres"
        jcbChoiceIdLoco.removeAllItems();  
        for(Locomotive loco : railway.getLocomotives())
        {
            boolean isUsed = false;
            for(Train train : railway.getTrains())
            {
                if(loco == train.getLocomotive())
                {
                    isUsed = true;
                    break;
                }
            }
            if(!isUsed)
            {
                jcbChoiceIdLoco.addItem(loco.getId());
            }
        }
        //on réactualise le comboBox jcbSignalIdTrain avec les id des signaux "libres"
        jcbSignalIdTrain.removeAllItems();
        for(Signal signal : railway.getSignals())
        {
            boolean isUsed = false;
            for(Train train : railway.getTrains())
            {
                if(signal.getId().equals(train.getSignalId()))
                {
                    isUsed = true;
                    break;
                }
            }
            if(!isUsed)
            {
                jcbSignalIdTrain.addItem(signal.getId());
            }
        }
        //si on a au moins une locomotive libre et au moins un signal libre
        //on peut créer un nouveau train
        if(jcbChoiceIdLoco.getItemCount() != 0 && jcbSignalIdTrain.getItemCount() != 0)
        {
            jtfMessageTrain.setText("Click GO when ready!");
            jtfMessageTrain.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_jrbTrainCreateActionPerformed
    
    //ce gestionnaire d'événements est appelé automatiquement lorsque le
    //radio-bouton jrbLocoCreate est choisi
    private void jrbLocoCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbLocoCreateActionPerformed
        //on rend visible seulement le formulaire jpLocoCreate
        jpLocoCreate.setVisible(true);
        jpTrainCreate.setVisible(false);
        jpTrainDelete.setVisible(false);
        jpLocoDelete.setVisible(false);
        jpUp.setVisible(false);
    }//GEN-LAST:event_jrbLocoCreateActionPerformed
    
    //ce gestionnaire d'événements est appelé quand l'utilisateur appuie sur le bouton
    //jbGoLoco afin de créer une nouvelle locomotive
    private void jbGoLocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGoLocoActionPerformed
        //initialisation des variables locales
        String id=null;
        int addr=-1, len=-1, inertia=-1;
        boolean ok = true;
        //tous les textField sont remplis avec du noir
        jtfAddressLoco.setForeground(Color.BLACK);
        jtfIdLoco.setForeground(Color.BLACK);
        jtfLengthLoco.setForeground(Color.BLACK);
        jtfInertiaLoco.setForeground(Color.BLACK);
        
        //On vérifie les valeurs introduites par l'utilisateur
        //on vérifie l'unicité de l'id de la locomotive à créer
        id = jtfIdLoco.getText();
        /*for(Locomotive unLoco : railway.getLocomotives())
        {
            if(id.equals(unLoco.getId()))
            {
                jtfIdLoco.setForeground(Color.RED);
                ok = false;
                break;
            }
        }*/
        if(railway.getLocomotiveById(id) != null || id.equals(""))
        {
            jtfIdLoco.setForeground(Color.RED);
            ok = false;
        }
        //on vérifie que l'adresse de la locomotive doit être bien un entier 
        //et de plus compris entre 0 et 7
        try
        {
            addr = Integer.parseInt(jtfAddressLoco.getText());
            if(addr < 0 || addr > 7)
            {
                jtfAddressLoco.setForeground(Color.RED);
                ok = false;
            }
        }catch(NumberFormatException nfe)
        {
            jtfAddressLoco.setForeground(Color.RED);
            ok = false;
        }
        //on vérifie que la longueur de la locomotive doit être bien un entier 
        //et de plus strictement positif        
        try
        {
            len = Integer.parseInt(jtfLengthLoco.getText());
            if(len <= 0)
            {
                jtfLengthLoco.setForeground(Color.RED);
                ok = false;
            }
        }catch(NumberFormatException nfe)
        {
            jtfLengthLoco.setForeground(Color.RED);
            ok = false;
        }
        //on vérifie que l'inertie de la locomotive doit être bien un entier 
        //et de plus valant 0 ou 1
        try
        {
            inertia = Integer.parseInt(jtfInertiaLoco.getText());
            if(inertia != 0 && inertia != 1)
            {
                jtfInertiaLoco.setForeground(Color.RED);
                ok = false;
            }
        }catch(NumberFormatException nfe)
        {
            jtfInertiaLoco.setForeground(Color.RED);
            ok = false;
        }  
        //si toutes les données introduites sont valides, on crée une nouvelle locomotive
        //et on l'ajoute au Railway
        if(ok)
        {
            Locomotive loco = new Locomotive(id, addr, len, inertia);
            railway.addLocomotive(loco);
            jtfMessageLoco.setText("Your Loco is created!");
            jtfMessageLoco.setForeground(Color.BLUE);
        }
        //s'il y a des données non-valides, voir ci-dessous
        else
        {
            jtfMessageLoco.setText("Correct the red error(s)!");
            jtfMessageLoco.setForeground(Color.RED);
        }
    }//GEN-LAST:event_jbGoLocoActionPerformed
    
    //ce gestionnaire d'événements est exécuté quand l'utilisateur commence à remplir
    //le textField jtfAddressLoco
    private void jtfAddressLocoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfAddressLocoKeyTyped
        //même si l'écriture antérieure était en rouge, les modifications seront en noir, etc.
        jtfAddressLoco.setForeground(Color.BLACK);
        jtfMessageLoco.setText("Click GO when ready!");
        jtfMessageLoco.setForeground(Color.BLACK);
    }//GEN-LAST:event_jtfAddressLocoKeyTyped
    
    //ce gestionnaire d'événements est exécuté quand l'utilisateur commence à remplir
    //le textField jtfIdLoco
    private void jtfIdLocoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfIdLocoKeyTyped
        //même si l'écriture antérieure était en rouge, les modifications seront en noir, etc.
        jtfIdLoco.setForeground(Color.BLACK);
        jtfMessageLoco.setText("Click GO when ready!");
        jtfMessageLoco.setForeground(Color.BLACK);
    }//GEN-LAST:event_jtfIdLocoKeyTyped
    
    //ce gestionnaire d'événements est exécuté quand l'utilisateur commence à remplir
    //le textField jtfLengthLoco
    private void jtfLengthLocoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfLengthLocoKeyTyped
        //même si l'écriture antérieure était en rouge, les modifications seront en noir, etc.
        jtfLengthLoco.setForeground(Color.BLACK);
        jtfMessageLoco.setText("Click GO when ready!");
        jtfMessageLoco.setForeground(Color.BLACK);
    }//GEN-LAST:event_jtfLengthLocoKeyTyped
    
    //ce gestionnaire d'événements est exécuté quand l'utilisateur commence à remplir
    //le textField jtfInertiaLoco
    private void jtfInertiaLocoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfInertiaLocoKeyTyped
        //même si l'écriture antérieure était en rouge, les modifications seront en noir, etc.
        jtfInertiaLoco.setForeground(Color.BLACK);
        jtfMessageLoco.setText("Click GO when ready!");
        jtfMessageLoco.setForeground(Color.BLACK);
    }//GEN-LAST:event_jtfInertiaLocoKeyTyped
    
    //ce gestionnaire d'événements est appelé quand l'utilisateur appuie sur le bouton
    //jbGoTrain afin de créer un nouveau train
    private void jbGoTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGoTrainActionPerformed
        //initialisation des variables
        Train train = null;
        //On vérifie l'unicité de l'id du train à créer
        String id = jtfIdTrain.getText();
        boolean ok = true;
        /*for(Train unTrain : railway.getTrains())
        {
            if(id.equals(unTrain.getId()))
            {
                jtfIdTrain.setForeground(Color.RED);
                ok = false; 
                break;
            }
        }*/
        if(railway.getTrainById(id) != null || id.equals(""))
        {
            ok = false; 
        }
        
        //si l'id pour le nouveau train n'est pas valide (il est déjà utilisé ou vide)
        if(!ok)
        {
            jtfMessageTrain.setText("This ID is not valid!");
            jtfMessageTrain.setForeground(Color.RED); 
            return;
        }
        //si aucune locomotive n'est libre (ie tous les locomotives sont utilisées par des trains)
        if(jcbChoiceIdLoco.getItemCount()==0)
        {
            jtfMessageTrain.setText("No locomotive available!");
            jtfMessageTrain.setForeground(Color.RED); 
            return;           
        }
        //si aucun signal n'est disponible (ie tous les signaux sont utilisés par des trains)
        if(jcbSignalIdTrain.getItemCount()==0)
        {
            jtfMessageTrain.setText("No signal available!");
            jtfMessageTrain.setForeground(Color.RED); 
            return;           
        }
        
        //si tout va bien on crée un nouveau train en précisant son id choisi    
        //ainsi que la locomotive
         /*for(Locomotive loco : railway.getLocomotives())
         {
         if(loco.getId().equals(jcbChoiceIdLoco.getSelectedItem()))
         {
         train = new Train(id, loco);
         break;
         }
         }*/
        train = new Train(id, railway.getLocomotiveById((String) jcbChoiceIdLoco.getSelectedItem()));
        //ensuite, on ajoute l'id du signal en tête du train
        train.setSignalId((String) jcbSignalIdTrain.getSelectedItem());

        //on ajoute le nouveau train crée au Railway
        railway.addTrain(train);
        jtfMessageTrain.setText("Your Train is created!");
        jtfMessageTrain.setForeground(Color.BLUE);

        
        //on réactualise le comboBox jcbChoiceIdLoco avec les id des locomotives "libres"
        jcbChoiceIdLoco.removeAllItems();  
        for(Locomotive loco : railway.getLocomotives())
        {
            boolean isUsed = false;
            for(Train unTrain : railway.getTrains())
            {
                if(loco == unTrain.getLocomotive())
                {
                    isUsed = true;
                    break;
                }
            }
            if(!isUsed)
            {
                jcbChoiceIdLoco.addItem(loco.getId());
            }
        }
        //on réactualise le comboBox jcbSignalIdTrain avec les id des signaux "libres"
        jcbSignalIdTrain.removeAllItems();
        for(Signal signal : railway.getSignals())
        {
            boolean isUsed = false;
            for(Train unTrain : railway.getTrains())
            {
                if(signal.getId().equals(unTrain.getSignalId()))
                {
                    isUsed = true;
                    break;
                }
            }
            if(!isUsed)
            {
                jcbSignalIdTrain.addItem(signal.getId());
            }
        }
        //si on a au moins une locomotive libre et au moins un signal libre
        //on peut créer un nouveau train
        if(jcbChoiceIdLoco.getItemCount() != 0 && jcbSignalIdTrain.getItemCount() != 0)
        {
            jtfMessageTrain.setText("Click GO when ready!");
            jtfMessageTrain.setForeground(Color.BLACK);
            jtfIdTrain.setText("");
        }else
        {
            jtfMessageTrain.setText("No possible creation!");
            jtfMessageTrain.setForeground(Color.RED);           
        }     
        
        //s'il n'y a plus de locomotive libre
        if (jcbChoiceIdLoco.getItemCount() == 0) {
            jtfMessageTrain.setText("No more free loco!");
            jtfMessageTrain.setForeground(Color.RED);
            jtfIdTrain.setText("");
        }
    }//GEN-LAST:event_jbGoTrainActionPerformed
    
    //ce gestionnaire d'événements est exécuté quand l'utilisateur commence à remplir
    //le textField jtfIdTrain
    private void jtfIdTrainKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfIdTrainKeyTyped
        //même si l'écriture antérieure était en rouge, les modifications seront en noir, etc.
        jtfIdTrain.setForeground(Color.BLACK);
        jtfMessageTrain.setText("Click GO when ready!");
        jtfMessageTrain.setForeground(Color.BLACK);
    }//GEN-LAST:event_jtfIdTrainKeyTyped
    
    //ce gestionnaire d'événements est appelé lorsque le
    //radio-bouton jrbLocoDelete est choisi
    private void jrbLocoDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbLocoDeleteActionPerformed
        //on rend visible seulement le formulaire jpLocoDelete
        jpLocoCreate.setVisible(false);
        jpTrainCreate.setVisible(false);
        jpTrainDelete.setVisible(false);
        jpLocoDelete.setVisible(true);
        jpUp.setVisible(false);
        
        //On réactualise la comboBox jcbChoiceIdLocoDeleteLoco avec les locomotives "libres"
        jcbChoiceIdLocoDeleteLoco.removeAllItems();  
        for(Locomotive loco : railway.getLocomotives())
        {
            boolean isUsed = false;
            for(Train train : railway.getTrains())
            {
                if(loco == train.getLocomotive())
                {
                    isUsed = true;
                    break;
                }
            }
            if(!isUsed)
            {
                jcbChoiceIdLocoDeleteLoco.addItem(loco.getId());
            }
        }
        //s'il n'y a pas de locomotive libre, voir ci-dessous
        if(jcbChoiceIdLocoDeleteLoco.getItemCount() == 0)
        {
            jtfMessageLocoDelete.setText("No more free loco to delete!");
            jtfMessageLocoDelete.setForeground(Color.RED);
            jtfAddressLocoDelete.setText("");
            jtfLengthLocoDelete.setText("");
            jtfInertiaLocoDelete.setText("");
        }
        //s'il y a des locomotives à supprimer, voir ci-dessous
        else
        {
            jtfMessageLocoDelete.setText("Click DELETE when ready!");
            jtfMessageLocoDelete.setForeground(Color.BLACK);
            if(jcbChoiceIdLocoDeleteLoco.getItemCount() != 0)
            {
                //pour chaque locomotive libre, on remplit les textField non-éditables 
                //contenant les données pour la locomotive sélectionnée
                /*for(Locomotive loco : railway.getLocomotives())
                {
                    if(loco.getId().equals(jcbChoiceIdLocoDeleteLoco.getSelectedItem()))
                    {
                        jtfAddressLocoDelete.setText(""+loco.getAddress());
                        jtfLengthLocoDelete.setText(""+loco.getLength());
                        jtfInertiaLocoDelete.setText(""+loco.getInertia());
                    }
                }*/
                Locomotive uneLoco = railway.getLocomotiveById((String)jcbChoiceIdLocoDeleteLoco.getSelectedItem());
                jtfAddressLocoDelete.setText(""+uneLoco.getAddress());
                jtfLengthLocoDelete.setText(""+uneLoco.getLength());
                jtfInertiaLocoDelete.setText(""+uneLoco.getInertia());
            }
        }
    }//GEN-LAST:event_jrbLocoDeleteActionPerformed
    
    //ce gestionnaire d'événements est appelé lorsque le
    //radio-bouton jrbTrainDelete est choisi
    private void jrbTrainDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTrainDeleteActionPerformed
        //on rend visible seulement le formulaire jpTrainDelete
        jpLocoCreate.setVisible(false);
        jpTrainCreate.setVisible(false);
        jpTrainDelete.setVisible(true);
        jpLocoDelete.setVisible(false);
        jpUp.setVisible(false);
        
        //On réactualise la comboBox jcbChoiceIdTrainDelete avec les trains à supprimer
        //(ie les trains qui ne bougent pas et qui n'ont pas de route associée)
        jcbChoiceIdTrainDelete.removeAllItems();
        for(Train train : railway.getTrains())
        {
            if(train.getRoute() == null && train.getLocomotive().getSpeed() == 0)
            {
                jcbChoiceIdTrainDelete.addItem(train.getId());
            }
        }
        
        //s'il n'y aucun train à supprimer, voir ci-dessous
        if(jcbChoiceIdTrainDelete.getItemCount() == 0)
        {
            jtfMessageTrainDelete.setText("No more train to delete!");
            jtfMessageTrainDelete.setForeground(Color.RED);
        }
        //s'il y a des trains à supprimer, voir ci-dessous
        else
        {
            //pour chaque train à supprimer, on remplit les textField non-éditables 
            //contenant les données pour le train à supprimer
            /*for(Train train : railway.getTrains()) 
            {
                if (train.getId().equals(jcbChoiceIdTrainDelete.getSelectedItem())) 
                {
                    jtfIdLocoDeleteTrain.setText(""+train.getLocomotive().getId());
                    jtfIdSignalDeleteTrain.setText(""+train.getSignalId());
                    //jtfIdLineDeleteTrain.setText(""+train.getLine().getId());
                }
            }*/
            Train unTrain = railway.getTrainById((String)jcbChoiceIdTrainDelete.getSelectedItem());
            jtfIdLocoDeleteTrain.setText(""+unTrain.getLocomotive().getId());
            jtfIdSignalDeleteTrain.setText(""+unTrain.getSignalId());
            
            jtfMessageTrainDelete.setText("Click DELETE when ready!");
            jtfMessageTrainDelete.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_jrbTrainDeleteActionPerformed
    
    //ce gestionnaire d'événements est appelé quand l'utilisateur appuie sur le bouton
    //jbDeleteLoco afin de supprimer une locomotive "libre"
    private void jbDeleteLocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteLocoActionPerformed
        //s'il n'y a pas de locomotive libre à supprimer
        if(jcbChoiceIdLocoDeleteLoco.getItemCount() == 0)
        {
            jtfMessageLocoDelete.setText("No more free loco to delete!");
            jtfMessageLocoDelete.setForeground(Color.RED);
            jtfAddressLocoDelete.setText("");
            jtfLengthLocoDelete.setText("");
            jtfInertiaLocoDelete.setText("");
            return;//on quitte la méthode et on n'a plus besoin d'un else plus bas
        }
        
        //On supprime la locomotive dont l'id est sélectionné
        /*String idLocoDel = (String)jcbChoiceIdLocoDeleteLoco.getSelectedItem();
        for(Locomotive loco : railway.getLocomotives())
        {
            if(loco.getId().equals(idLocoDel))
            {
                railway.deleteLocomotive(loco);
                break;
            }
        }*/
        railway.deleteLocomotive(railway.getLocomotiveById((String)jcbChoiceIdLocoDeleteLoco.getSelectedItem()));
        
        //On réactualise la liste des locomotives libres car il y a une locomotive en moins
        jcbChoiceIdLocoDeleteLoco.removeAllItems();  
        for(Locomotive loco : railway.getLocomotives())
        {
            boolean isUsed = false;
            for(Train train : railway.getTrains())
            {
                if(loco == train.getLocomotive())
                {
                    isUsed = true;
                    break;
                }
            }
            if(!isUsed)
            {
                jcbChoiceIdLocoDeleteLoco.addItem(loco.getId());
            }
        }
        //s'il n'y a plus de locomotive à supprimer
        if(jcbChoiceIdLocoDeleteLoco.getItemCount() == 0)
        {
            jtfMessageLocoDelete.setText("No more free loco to delete!");
            jtfMessageLocoDelete.setForeground(Color.RED);
            jtfAddressLocoDelete.setText("");
            jtfLengthLocoDelete.setText("");
            jtfInertiaLocoDelete.setText("");
        }
        //s'il y a encore des locmotives à supprimer, on remplit les textField non-éditables 
        //contenant les données pour la locmotive dont l'id est sélectionné
        else
        {
            if(jcbChoiceIdLocoDeleteLoco.getItemCount() != 0)
            {
                /*for(Locomotive loco : railway.getLocomotives())
                {
                    if(loco.getId().equals(jcbChoiceIdLocoDeleteLoco.getSelectedItem()))
                    {
                        jtfAddressLocoDelete.setText(""+loco.getAddress());
                        jtfLengthLocoDelete.setText(""+loco.getLength());
                        jtfInertiaLocoDelete.setText(""+loco.getInertia());
                    }
                }*/
                Locomotive uneLoco = railway.getLocomotiveById((String)jcbChoiceIdLocoDeleteLoco.getSelectedItem());
                jtfAddressLocoDelete.setText(""+uneLoco.getAddress());
                jtfLengthLocoDelete.setText(""+uneLoco.getLength());
                jtfInertiaLocoDelete.setText(""+uneLoco.getInertia());
            }
        }
    }//GEN-LAST:event_jbDeleteLocoActionPerformed
    
    //ce gestionnaire d'événements est appelé quand l'utilisateur appuie sur le bouton
    //jbDeleteTrain afin de supprimer un train "non-utilisé"
    private void jbDeleteTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteTrainActionPerformed
        //s'il n'y a pas de train non utilisé à supprimer
        if(jcbChoiceIdTrainDelete.getItemCount() == 0)
        {
            jtfMessageTrainDelete.setText("No more train to delete!");
            jtfMessageTrainDelete.setForeground(Color.RED);
            jtfIdLocoDeleteTrain.setText("");
            jtfIdSignalDeleteTrain.setText("");
            return;//on quitte la méthode et on n'a plus besoin d'un else plus bas
        }
        
        //On supprime le train non utilisé dont l'id est sélectionné      
        /*String idTrainDel = (String)jcbChoiceIdTrainDelete.getSelectedItem();
        for(Train train : railway.getTrains())
        {
            if(train.getId().equals(idTrainDel))
            {
                railway.deleteTrain(train);
                break;
            }
        }*/     
        railway.deleteTrain(railway.getTrainById((String)jcbChoiceIdTrainDelete.getSelectedItem()));
        
        //On réactualise la liste des trains non-utiliés car il y a un train en moins
        jcbChoiceIdTrainDelete.removeAllItems();  
        for(Train train : railway.getTrains())
        {
            if(train.getRoute() == null && train.getLocomotive().getSpeed() == 0)
            {
                jcbChoiceIdTrainDelete.addItem(train.getId());
            }
        }
        //s'il n'y a plus de train non-utilisé à supprimer
        if(jcbChoiceIdTrainDelete.getItemCount() == 0)
        {
            jtfMessageTrainDelete.setText("No more train to delete!");
            jtfMessageTrainDelete.setForeground(Color.RED);
            jtfIdLocoDeleteTrain.setText("");
            jtfIdSignalDeleteTrain.setText("");
        }
        //s'il y a encore des trains à supprimer, on remplit les textField non-éditables 
        //contenant les données pour le train dont l'id est sélectionné
        else
        {
            /*for (Train train : railway.getTrains()) 
            {
                if (train.getId().equals(jcbChoiceIdTrainDelete.getSelectedItem())) 
                {
                    jtfIdLocoDeleteTrain.setText(""+train.getLocomotive().getId());
                    jtfIdSignalDeleteTrain.setText(""+train.getSignalId());
                    //jtfIdLineDeleteTrain.setText(""+train.getLine().getId());
                }
            }*/
            Train unTrain = railway.getTrainById((String)jcbChoiceIdTrainDelete.getSelectedItem());
            jtfIdLocoDeleteTrain.setText(""+unTrain.getLocomotive().getId());
            jtfIdSignalDeleteTrain.setText(""+unTrain.getSignalId());
        }  
    }//GEN-LAST:event_jbDeleteTrainActionPerformed
    
    //le gestionnaire d'événement ci-dessous est appelé chaque fois quand l'utilisateur 
    //modifie le item sélectionné dans la comboBox jcbChoiceIdLocoDelete
    private void jcbChoiceIdLocoDeleteLocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbChoiceIdLocoDeleteLocoActionPerformed
        if(jcbChoiceIdLocoDeleteLoco.getItemCount() != 0)
            {
                //pour chaque locomotive libre sélectionnée, on remplit les textField non-éditables 
                //contenant les données de cette locomotive 
                /*for(Locomotive loco : railway.getLocomotives())
                {
                    if(loco.getId().equals(jcbChoiceIdLocoDeleteLoco.getSelectedItem()))
                    {
                        jtfAddressLocoDelete.setText(""+loco.getAddress());
                        jtfLengthLocoDelete.setText(""+loco.getLength());
                        jtfInertiaLocoDelete.setText(""+loco.getInertia());
                    }
                }*/
                Locomotive uneLoco = railway.getLocomotiveById((String)jcbChoiceIdLocoDeleteLoco.getSelectedItem());
                jtfAddressLocoDelete.setText(""+uneLoco.getAddress());
                jtfLengthLocoDelete.setText(""+uneLoco.getLength());
                jtfInertiaLocoDelete.setText(""+uneLoco.getInertia());
            }
    }//GEN-LAST:event_jcbChoiceIdLocoDeleteLocoActionPerformed
    
    //le gestionnaire d'événement ci-dessous est appelé chaque fois quand l'utilisateur 
    //modifie le item sélectionné dans la comboBox jcbChoiceIdTrainDelete
    private void jcbChoiceIdTrainDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbChoiceIdTrainDeleteActionPerformed
        if(jcbChoiceIdTrainDelete.getItemCount() != 0)
        {
            //pour chaque train à supprimer sélectionné, on remplit les textField non-éditables 
            //contenant les données pour ce train
            /*for (Train train : railway.getTrains()) 
            {
                if (train.getId().equals(jcbChoiceIdTrainDelete.getSelectedItem())) 
                {
                    jtfIdLocoDeleteTrain.setText(""+train.getLocomotive().getId());
                    jtfIdSignalDeleteTrain.setText(""+train.getSignalId());
                    //jtfIdLineDeleteTrain.setText(""+train.getLine().getId());
                }
            }*/
            Train unTrain = railway.getTrainById((String)jcbChoiceIdTrainDelete.getSelectedItem());
            jtfIdLocoDeleteTrain.setText(""+unTrain.getLocomotive().getId());
            jtfIdSignalDeleteTrain.setText(""+unTrain.getSignalId());
            //jtfIdLineDeleteTrain.setText(""+unTrain.getLine().getId());
        }
    }//GEN-LAST:event_jcbChoiceIdTrainDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrainManagGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrainManagGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrainManagGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrainManagGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrainManagGUI(Railway.instance()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgChoice;
    private javax.swing.JButton jbDeleteLoco;
    private javax.swing.JButton jbDeleteTrain;
    private javax.swing.JButton jbGoLoco;
    private javax.swing.JButton jbGoTrain;
    private javax.swing.JComboBox jcbChoiceIdLoco;
    private javax.swing.JComboBox jcbChoiceIdLocoDeleteLoco;
    private javax.swing.JComboBox jcbChoiceIdTrainDelete;
    private javax.swing.JComboBox jcbSignalIdTrain;
    private javax.swing.JLabel jlAddressLoco;
    private javax.swing.JLabel jlAddressLocoDelete;
    private javax.swing.JLabel jlChoice;
    private javax.swing.JLabel jlIDLoco;
    private javax.swing.JLabel jlIdTrain;
    private javax.swing.JLabel jlInertiaLoco;
    private javax.swing.JLabel jlInertiaLocoDelete;
    private javax.swing.JLabel jlLengthLoco;
    private javax.swing.JLabel jlLengthLocoDelete;
    private javax.swing.JLabel jlLoco;
    private javax.swing.JLabel jlLocoDelete;
    private javax.swing.JLabel jlLocoIdDelete;
    private javax.swing.JLabel jlLocoIdTrain;
    private javax.swing.JLabel jlLocoIdTrainDelete;
    private javax.swing.JLabel jlSignalIdTrain;
    private javax.swing.JLabel jlSignalIdTrainDelete;
    private javax.swing.JLabel jlTrain;
    private javax.swing.JLabel jlTrainDelete;
    private javax.swing.JLabel jlTrainIdDelete;
    private javax.swing.JLayeredPane jlpChoice;
    private javax.swing.JPanel jpChoice;
    private javax.swing.JPanel jpLocoCreate;
    private javax.swing.JPanel jpLocoDelete;
    private javax.swing.JPanel jpTrainCreate;
    private javax.swing.JPanel jpTrainDelete;
    private javax.swing.JPanel jpUp;
    private javax.swing.JRadioButton jrbLocoCreate;
    private javax.swing.JRadioButton jrbLocoDelete;
    private javax.swing.JRadioButton jrbTrainCreate;
    private javax.swing.JRadioButton jrbTrainDelete;
    private javax.swing.JTextField jtfAddressLoco;
    private javax.swing.JTextField jtfAddressLocoDelete;
    private javax.swing.JTextField jtfIdLoco;
    private javax.swing.JTextField jtfIdLocoDeleteTrain;
    private javax.swing.JTextField jtfIdSignalDeleteTrain;
    private javax.swing.JTextField jtfIdTrain;
    private javax.swing.JTextField jtfInertiaLoco;
    private javax.swing.JTextField jtfInertiaLocoDelete;
    private javax.swing.JTextField jtfLengthLoco;
    private javax.swing.JTextField jtfLengthLocoDelete;
    private javax.swing.JTextField jtfMessageLoco;
    private javax.swing.JTextField jtfMessageLocoDelete;
    private javax.swing.JTextField jtfMessageTrain;
    private javax.swing.JTextField jtfMessageTrainDelete;
    private javax.swing.JTextField jtfTitle;
    // End of variables declaration//GEN-END:variables
}
