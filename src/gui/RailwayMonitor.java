package dcrs.gui;

import dcrs.railway.*;
import javax.swing.table.TableModel;

/**
 *
 * @author  benoitpointet
 */

/*
 * The railway monitor reads different informations about the railway
 * and displays them in a GUI. Your task is to write the different methods
 * which read the data and write them into the GUI.
 * Hint: you may want to have a look at the updateSwitches method.
 */
import java.util.ArrayList;
public class RailwayMonitor extends javax.swing.JFrame implements Runnable {
    /**
     * Reference to the railway.
     */
    Railway railway;
    

    
    

    /**
     * creates a RailwayMonitor GUI for a given Railway
     * @param railway to monitor.
     */
    public RailwayMonitor(Railway railway) {
        initComponents();
        this.railway = railway;
        Thread thread = new Thread(this);
        thread.start();
        this.setVisible(true);
        // Now create a new TextAreaOutputStream to write to our JTextArea control and wrap a
        // PrintStream around it to support the println/printf methods.
        //PrintStream out = new PrintStream(new TextAreaOutputStream(logTA));
        //Logger.setOutputStream(out);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ToolsPane = new javax.swing.JTabbedPane();
        RailwayPane = new javax.swing.JPanel();
        trainsSP = new javax.swing.JScrollPane();
        trainsT = new javax.swing.JTable();
        trainsL = new javax.swing.JLabel();
        locsL = new javax.swing.JLabel();
        locsSP = new javax.swing.JScrollPane();
        locsT = new javax.swing.JTable();
        linesL = new javax.swing.JLabel();
        linesSP = new javax.swing.JScrollPane();
        linesT = new javax.swing.JTable();
        routesL = new javax.swing.JLabel();
        routesSP = new javax.swing.JScrollPane();
        routesT = new javax.swing.JTable();
        blocksL = new javax.swing.JLabel();
        blocksSP = new javax.swing.JScrollPane();
        blocksT = new javax.swing.JTable();
        sectorsL = new javax.swing.JLabel();
        sectorsSP = new javax.swing.JScrollPane();
        sectorsT = new javax.swing.JTable();
        switchesL = new javax.swing.JLabel();
        switchesSP = new javax.swing.JScrollPane();
        switchesT = new javax.swing.JTable();
        logL = new javax.swing.JLabel();
        logCB = new javax.swing.JComboBox();
        logSP = new javax.swing.JScrollPane();
        logTA = new javax.swing.JTextArea();
        locStopButton = new javax.swing.JButton();
        locGoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RailwayPane.setMaximumSize(new java.awt.Dimension(32767, 35767));

        trainsT.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        trainsT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "id", "block", "route", "station", "line"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        trainsT.setColumnSelectionAllowed(true);
        trainsT.setRowHeight(12);
        trainsT.getTableHeader().setReorderingAllowed(false);
        trainsSP.setViewportView(trainsT);
        trainsT.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        trainsL.setText("trains"); // NOI18N

        locsL.setText("locomotives"); // NOI18N

        locsT.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        locsT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id", "spee", "dir", "lights"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        locsT.setColumnSelectionAllowed(true);
        locsT.setRowHeight(12);
        locsT.getTableHeader().setReorderingAllowed(false);
        locsSP.setViewportView(locsT);
        locsT.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        linesL.setText("lines"); // NOI18N

        linesT.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        linesT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "id", "station", "stations"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        linesT.setRowHeight(12);
        linesT.getTableHeader().setReorderingAllowed(false);
        linesSP.setViewportView(linesT);
        linesT.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        routesL.setText("routes"); // NOI18N

        routesT.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        routesT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "id", "current", "stations"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        routesT.setRowHeight(12);
        routesT.getTableHeader().setReorderingAllowed(false);
        routesSP.setViewportView(routesT);
        routesT.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        blocksL.setText("blocks"); // NOI18N

        blocksT.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        blocksT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id", "locked", "occupied", "securable"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blocksT.setColumnSelectionAllowed(true);
        blocksT.setRowHeight(12);
        blocksT.getTableHeader().setReorderingAllowed(false);
        blocksSP.setViewportView(blocksT);
        blocksT.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        sectorsL.setText("sectors"); // NOI18N

        sectorsT.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        sectorsT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "id", "locked", "occupied"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sectorsT.setColumnSelectionAllowed(true);
        sectorsT.setRowHeight(12);
        sectorsT.getTableHeader().setReorderingAllowed(false);
        sectorsSP.setViewportView(sectorsT);
        sectorsT.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        switchesL.setText("switches"); // NOI18N

        switchesT.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        switchesT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "id", "position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        switchesT.setColumnSelectionAllowed(true);
        switchesT.setRowHeight(12);
        switchesT.getTableHeader().setReorderingAllowed(false);
        switchesSP.setViewportView(switchesT);
        switchesT.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        logL.setText("log level"); // NOI18N

        logCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ERROR", "WARNING", "INFO", "TRACE", "DEBUG" }));
        logCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                logCBMouseReleased(evt);
            }
        });

        logTA.setColumns(20);
        logTA.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        logTA.setRows(5);
        logSP.setViewportView(logTA);

        locStopButton.setBackground(java.awt.Color.red);
        locStopButton.setText("STOP");
        locStopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emergencyStop(evt);
            }
        });

        locGoButton.setBackground(java.awt.Color.green);
        locGoButton.setText("GO");
        locGoButton.setEnabled(false);
        locGoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locGoButtonMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout RailwayPaneLayout = new org.jdesktop.layout.GroupLayout(RailwayPane);
        RailwayPane.setLayout(RailwayPaneLayout);
        RailwayPaneLayout.setHorizontalGroup(
            RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, RailwayPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(RailwayPaneLayout.createSequentialGroup()
                        .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(RailwayPaneLayout.createSequentialGroup()
                                .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(trainsL)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, trainsSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .add(14, 14, 14))
                            .add(RailwayPaneLayout.createSequentialGroup()
                                .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(routesSP, 0, 0, Short.MAX_VALUE)
                                    .add(linesSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .add(locsSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .add(RailwayPaneLayout.createSequentialGroup()
                                        .add(locsL)
                                        .add(6, 6, 6)
                                        .add(locStopButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(locGoButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(linesL)
                                    .add(routesL)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, RailwayPaneLayout.createSequentialGroup()
                                        .add(logL)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(logCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(RailwayPaneLayout.createSequentialGroup()
                                .add(blocksSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 315, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(switchesSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 194, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 56, Short.MAX_VALUE))
                            .add(RailwayPaneLayout.createSequentialGroup()
                                .add(blocksL)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(switchesL)
                                .add(160, 160, 160))))
                    .add(logSP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(sectorsL)
                    .add(sectorsSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 194, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        RailwayPaneLayout.setVerticalGroup(
            RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RailwayPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(RailwayPaneLayout.createSequentialGroup()
                        .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(sectorsL)
                            .add(switchesL))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sectorsSP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE))
                    .add(RailwayPaneLayout.createSequentialGroup()
                        .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(RailwayPaneLayout.createSequentialGroup()
                                .add(trainsL)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(trainsSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(locsL)
                                    .add(locStopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(locGoButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(locsSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(linesL)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(linesSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(routesL)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(routesSP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 46, Short.MAX_VALUE))
                            .add(RailwayPaneLayout.createSequentialGroup()
                                .add(blocksL)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(switchesSP, 0, 360, Short.MAX_VALUE)
                                    .add(blocksSP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(RailwayPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(logL)
                            .add(logCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(16, 16, 16)
                        .add(logSP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)))
                .add(19, 19, 19))
        );

        ToolsPane.addTab("Railway", RailwayPane);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(ToolsPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1001, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(ToolsPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 806, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void logCBMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logCBMouseReleased
    //Logger.setLogLevel(this.logCB.getSelectedIndex());
   System.out.println(this.logCB.getSelectedIndex() + ">");//GEN-LAST:event_logCBMouseReleased
    }

private void emergencyStop(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emergencyStop
    for (Train each : railway.getTrains()) {
        each.getLocomotive().emergencyStop();
    }
    this.locGoButton.setEnabled(true);
    this.locStopButton.setEnabled(false);
}//GEN-LAST:event_emergencyStop

private void locGoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locGoButtonMouseClicked
    for (Train each : railway.getTrains()) {
        each.getLocomotive().emergencyContinue();
    }
    this.locGoButton.setEnabled(false);
    this.locStopButton.setEnabled(true);
}//GEN-LAST:event_locGoButtonMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel RailwayPane;
    private javax.swing.JTabbedPane ToolsPane;
    private javax.swing.JLabel blocksL;
    private javax.swing.JScrollPane blocksSP;
    private javax.swing.JTable blocksT;
    private javax.swing.JLabel linesL;
    private javax.swing.JScrollPane linesSP;
    private javax.swing.JTable linesT;
    private javax.swing.JButton locGoButton;
    private javax.swing.JButton locStopButton;
    private javax.swing.JLabel locsL;
    private javax.swing.JScrollPane locsSP;
    private javax.swing.JTable locsT;
    private javax.swing.JComboBox logCB;
    private javax.swing.JLabel logL;
    private javax.swing.JScrollPane logSP;
    private javax.swing.JTextArea logTA;
    private javax.swing.JLabel routesL;
    private javax.swing.JScrollPane routesSP;
    private javax.swing.JTable routesT;
    private javax.swing.JLabel sectorsL;
    private javax.swing.JScrollPane sectorsSP;
    private javax.swing.JTable sectorsT;
    private javax.swing.JLabel switchesL;
    private javax.swing.JScrollPane switchesSP;
    private javax.swing.JTable switchesT;
    private javax.swing.JLabel trainsL;
    private javax.swing.JScrollPane trainsSP;
    private javax.swing.JTable trainsT;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (true) {
            update();
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                //Logger.logException(ex, "");
            }
        }
    }

    /**
     * updates the various graphical items of the GUI.
     */
    private void update() {
        updateTrains();
        updateLocs();
        updateLines();
        updateRoutes();
        updateBlocks();
        updateSectors();
        updateSwitches();
    }

    /**
     * Writes an array into a JTable.
     * @param model the table
     * @param values the array
     */
    private void updateModel(TableModel model, String[][] values) {
        for (int i = 0; i < values.length; i++) {
            for (int j = 0; j < values[i].length; j++) {
                model.setValueAt(values[i][j], i, j);
            }
        }
    }

    /**
     * Update the informations about the trains
     */
    private void updateTrains() {
        String[][] values = new String[5][trainsT.getModel().getColumnCount()];
        /*
         * For each train, the columns must be :
         *  0. the ID of the train
         *  1. the ID of its current block
         *  2. the ID of its route
         *  3. the ID of its current station
         *  4. the ID of its line
         */
        
        for (Train each : railway.getTrains()) {
            int i = railway.getTrains().indexOf(each);
            values[i][0] = each.getId();
            if (each.getRoute()!=null) {
                values[i][1] = each.getRoute().getCurrentBlock().getId();
                values[i][2] = each.getRoute().getId();
            } else {
                values[i][1] = "None";
                values[i][2] = "None";
            }

            if (each.getLine()!=null) {
                values[i][3] = each.getLine().getCurrentStation().getId();
                values[i][4] = each.getLine().getId();
            } else {
                values[i][3] = "None";
                values[i][4] = "None";
            }

        }
        int numtrains = railway.getTrains().size();
        for(int i= numtrains; i<5; i++){
            values[i][1] = "";
            values[i][2] = "";
            values[i][3] = "";
            values[i][4] = "";
        }

        updateModel(trainsT.getModel(), values);
    }

    /**
     * Updates the information about the locomotives.
     */
    private void updateLocs() {
        String[][] values = new String[railway.getLocomotives().size()][locsT.getModel().getColumnCount()];
        /*
         * For each locomotive, the columns must be :
         *  0. the ID of the loc
         *  1. the speed of the loc (hint: turn it into a string)
         *  2. the direction of the loc (0 -> forward, 1 -> backward)
         *  3. the light of the loc (0 -> on, 1 -> off )
         */

    for (Locomotive each : railway.getLocomotives()) {
            int i = railway.getLocomotives().indexOf(each);
            //TODO: implement
            values[i][0] = "";
            values[i][1] = "";
            values[i][2] = "";
            values[i][3] = "";
    }
        updateModel(locsT.getModel(), values);
    }

    /**
     * Update the information about the lines.
     */
    private void updateLines() {
        String[][] values = new String[railway.getLines().size()][linesT.getModel().getColumnCount()];
        /*
         * For each line, the columns of value must be :
         *  0. the id of the line
         *  1. the current station of the line
         *  2. the line "toString()"
         */

    for (Line each : railway.getLines()) {
            int i = railway.getLines().indexOf(each);
            //TODO: implement
            values[i][0]="";
            values[i][1]="";
            values[i][2]="";
    }
        updateModel(linesT.getModel(), values);
    }

    /**
     * Updates informations about the routes.
     */
    private void updateRoutes() {
        String[][] values = new String[railway.getTrains().size()][routesT.getModel().getColumnCount()];
        /*
         * For the route of each train, the columns of value must be :
         *  0. the ID of the route
         *  1. the current block of the route
         *  2. the route "toString()"
         */

    for (Train each : railway.getTrains()) {
            //TODO: implement
        int i= railway.getTrains().indexOf(each);
        if(each.getRoute()!=null){
         values[i][0]="";
         values[i][1]="";
         values[i][2]="";
        }
         
    }
        updateModel(routesT.getModel(), values);
    }

    /**
     * Updates informations about the blocks.
     */
    private void updateBlocks() {
        int max = (railway.getBlocks().size()>100) ? 100 : railway.getBlocks().size();
        String[][] values = new String[max][blocksT.getModel().getColumnCount()];
        /*
         * For each block of the railway, the columns must be :
         *  0. the ID of the block
         *  1. the lock state of the block (1 -> "locked", 0 -> "" or "unlocked" )
         *  2. the occupation of the block (1 -> "occupied", 0 -> "" or "unoccupied" )
         *  3. the securable state of the block (1->"securable", 0 -> "no" or "unsecurable" )
         */

        //TODO: implement
        for(int i=0;i<=99;i++){
            
            values[i][0]="";
            values[i][1]="";
            values[i][2]="";
            values[i][3]="";
        }
        
        updateModel(blocksT.getModel(), values);
    }

    /**
     * Updates informations about the sectors.
     */
    private void updateSectors() {
        String[][] values = new String[railway.getSectors().size()][sectorsT.getModel().getColumnCount()];
        /*
         * For each sector, the columns of value must be :
         *  0. the ID of the sector
         *  1. the lock state of the sector (1->"locked", 0->"" or "unlocked")
         *  2. the occupation of the sector (1->"occupied", 0->"" or "unoccupied")
         */
        //TODO: implement
        for(Sector each : railway.getSectors()){
            int i=railway.getSectors().indexOf(each);
            values[i][0]="";
            values[i][1]="";
            values[i][2]="";
        }
      
        
        
        updateModel(sectorsT.getModel(), values);
    }

    /**
     * Updates informations about the switches.
     */
    private void updateSwitches() {
        String[][] values = new String[railway.getSwitches().size()][switchesT.getModel().getColumnCount()];
               /*
         * For each switch, the columns of value must be :
         *  0. the ID of the switch
         *  1. the position of the switch
         */
        //TODO: implement
        for(Switch each : railway.getSwitches()){
            int i=railway.getSwitches().indexOf(each);
            values[i][0]="";
            values[i][1]="";
        }
        
        updateModel(switchesT.getModel(), values);
    }
}
